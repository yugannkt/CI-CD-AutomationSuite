<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job">
  <actions/>
  <description>{{ description | default('Pipeline Job for WebHosting-Terraform-CICD-SonarQube') }}</description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps">
    <script><![CDATA[
            pipeline {
                agent any
                environment {
                    SONARQUBE_URL = 'http://54.209.25.166:9000'
                    PROJECT_KEY = 'poc4'
                    SONAR_SCANNER_HOME = '/opt/sonar-scanner-4.8.0.2856-linux'
                    SONAR_TOKEN = 'squ_4d8c74cf55f63d345ccd594ab1694603c8438f29' // Use Jenkins credentials for security
                }
                stages {
                    stage('Checkout') {
                        steps {
                            git branch: 'main', url: 'https://github.com/yugannkt/WebHosting-Terraform-CICD-SonarQube.git'
                        }
                    }
                    stage('SonarQube Analysis') {
                        steps {
                            script {
                                sh """
                                ${SONAR_SCANNER_HOME}/bin/sonar-scanner -X \
                                    -Dsonar.projectKey=${PROJECT_KEY} \
                                    -Dsonar.sources=. \
                                    -Dsonar.host.url=${SONARQUBE_URL} \
                                    -Dsonar.login=${SONAR_TOKEN}
                                """
                            }
                        }
                    }
                    stage('Quality Gate Check') {
                        steps {
                            script {
                                def sonarProjectUrl = "${SONARQUBE_URL}/api/qualitygates/project_status?projectKey=${PROJECT_KEY}"
                                def qualityGateStatus = ''
                                
                                // Retry fetching the quality gate status until it is available or until a timeout
                                timeout(time: 10, unit: 'MINUTES') {
                                    waitUntil {
                                        sleep(30) // Wait for a bit before checking again
                                        def response = sh(script: "curl -s -u ${SONAR_TOKEN}: ${sonarProjectUrl}", returnStdout: true)
                                        def json = new groovy.json.JsonSlurper().parseText(response) // Parse the JSON response
                                        qualityGateStatus = json.projectStatus.status // Extract the quality gate status
                                        echo "Current Quality Gate Status: ${qualityGateStatus}"
                                        return qualityGateStatus == 'OK' || qualityGateStatus == 'WARN' // Continue if the quality gate is OK or WARN
                                    }
                                }

                                // Handle cases based on the quality gate status
                                if (qualityGateStatus == 'ERROR') {
                                    currentBuild.result = 'FAILURE'
                                    error "Quality Gate failed. Build aborted."
                                } else {
                                    currentBuild.result = 'SUCCESS'
                                }
                            }
                        }
                    }
                    stage('Deploy to Apache') {
                        when {
                            expression {
                                return currentBuild.result == 'SUCCESS'
                            }
                        }
                        steps {
                            script {
                                // Apache deployment commands
                                def deployCommands = '''
                                #!/bin/bash
                                sudo systemctl start apache2
                                sudo rm -rf /var/www/html/*
                                sudo cp -r * /var/www/html/
                                sudo chown -R www-data:www-data /var/www/html/*
                                sudo chmod -R 755 /var/www/html/*
                                sudo systemctl restart apache2
                                '''

                                // Execute the deployment commands
                                sh deployCommands
                            }
                        }
                    }
                }
            }
    ]]></script>
    <sandbox>true</sandbox>
  </definition>
  <triggers>
    <com.cloudbees.jenkins.GitHubPushTrigger plugin="github@1.40.0"/>
  </triggers>
  <disabled>false</disabled>
</flow-definition>
